#! /usr/bin/env bash

function mission_patch() {
    local options=$1

    local version="2.8.1"

    local script_name=$(basename "${BASH_SOURCE[0]}")
    local script_name=${script_name%.*}

    if [ $(abcli_option_int "$options" help 0) == 1 ]; then
        local options="count=<1>,dryrun,height=<1024>,open,width=<1024>,dryrun,~upload,url=<url>"
        abcli_script_show_usage "$script_name$ABCUL[$options]$ABCUL[<object-name>]$ABCUL[<args>]" \
            "generate mission patches for <url>."
        return
    fi

    openai init

    local url=$(abcli_option "$options" url https://earthdaily.com/constellation/)
    local count=$(abcli_option_int "$options" count 1)
    local do_dryrun=$(abcli_option_int "$options" dryrun 0)
    local do_open=$(abcli_option_int "$options" open 0)
    local do_upload=$(abcli_option_int "$options" upload $(abcli_not $do_dryrun))

    local object_name=$(abcli_clarify_object $2 $(abcli_string_timestamp))

    local description=$(aiart html ingest_url $url \
        --fake_agent 1)
    abcli_log "ðŸ“œ $description"

    # necessary because of assumptions in openai and aiart :(
    abcli_select $object_name ~trail
    [[ "$do_open" == 1 ]] && open .

    local index
    for ((index = 1; index <= count; index++)); do
        local prompt=$(openai complete "describe the following in three sentences: $description")
        local prompt=$(echo "$prompt" | tr "'" " ")
        abcli_log "ðŸ“œ $prompt"

        openai generate image \
            $(abcli_option_subset \
                "$options" \
                ~dryrun,height=1024,width=1024) \
            mission-patch-$(python3 -c "print('{:05d}'.format($index))") - \
            "generate a mission patch for the satellite constellation described as follows: $prompt"
    done

    [[ "$do_upload" == 1 ]] &&
        abcli_upload object $object_name

    abcli_tag set \
        $object_name mission-patch
}

mission_patch "$@"
